/**
 */
package org.gravity.typegraph.basic.containers.provider;

import java.util.ArrayList;
import java.util.Collection;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.edit.provider.ChangeNotifier;
import org.eclipse.emf.edit.provider.ComposeableAdapterFactory;
import org.eclipse.emf.edit.provider.ComposedAdapterFactory;
import org.eclipse.emf.edit.provider.IChangeNotifier;
import org.eclipse.emf.edit.provider.IDisposable;
import org.eclipse.emf.edit.provider.IEditingDomainItemProvider;
import org.eclipse.emf.edit.provider.IItemLabelProvider;
import org.eclipse.emf.edit.provider.IItemPropertySource;
import org.eclipse.emf.edit.provider.INotifyChangedListener;
import org.eclipse.emf.edit.provider.IStructuredItemContentProvider;
import org.eclipse.emf.edit.provider.ITreeItemContentProvider;

import org.gravity.typegraph.basic.containers.util.ContainersAdapterFactory;

/**
 * This is the factory that is used to provide the interfaces needed to support Viewers.
 * The adapters generated by this factory convert EMF adapter notifications into calls to {@link #fireNotifyChanged fireNotifyChanged}.
 * The adapters also support Eclipse property sheets.
 * Note that most of the adapters are shared among multiple instances.
 * <!-- begin-user-doc -->
 * <!-- end-user-doc -->
 * @generated
 */
public class ContainersItemProviderAdapterFactory extends ContainersAdapterFactory
		implements ComposeableAdapterFactory, IChangeNotifier, IDisposable {
	/**
	 * This keeps track of the root adapter factory that delegates to this adapter factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ComposedAdapterFactory parentAdapterFactory;

	/**
	 * This is used to implement {@link org.eclipse.emf.edit.provider.IChangeNotifier}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IChangeNotifier changeNotifier = new ChangeNotifier();

	/**
	 * This keeps track of all the supported types checked by {@link #isFactoryForType isFactoryForType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Collection<Object> supportedTypes = new ArrayList<Object>();

	/**
	 * This constructs an instance.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public ContainersItemProviderAdapterFactory() {
		supportedTypes.add(IEditingDomainItemProvider.class);
		supportedTypes.add(IStructuredItemContentProvider.class);
		supportedTypes.add(ITreeItemContentProvider.class);
		supportedTypes.add(IItemLabelProvider.class);
		supportedTypes.add(IItemPropertySource.class);
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.gravity.typegraph.basic.containers.TTypeContainer} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected TTypeContainerItemProvider tTypeContainerItemProvider;

	/**
	 * This creates an adapter for a {@link org.gravity.typegraph.basic.containers.TTypeContainer}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createTTypeContainerAdapter() {
		if (tTypeContainerItemProvider == null) {
			tTypeContainerItemProvider = new TTypeContainerItemProvider(this);
		}

		return tTypeContainerItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.gravity.typegraph.basic.containers.TAccessContainer} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected TAccessContainerItemProvider tAccessContainerItemProvider;

	/**
	 * This creates an adapter for a {@link org.gravity.typegraph.basic.containers.TAccessContainer}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createTAccessContainerAdapter() {
		if (tAccessContainerItemProvider == null) {
			tAccessContainerItemProvider = new TAccessContainerItemProvider(this);
		}

		return tAccessContainerItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.gravity.typegraph.basic.containers.TMemberContainer} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected TMemberContainerItemProvider tMemberContainerItemProvider;

	/**
	 * This creates an adapter for a {@link org.gravity.typegraph.basic.containers.TMemberContainer}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createTMemberContainerAdapter() {
		if (tMemberContainerItemProvider == null) {
			tMemberContainerItemProvider = new TMemberContainerItemProvider(this);
		}

		return tMemberContainerItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.gravity.typegraph.basic.containers.TClassContainer} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected TClassContainerItemProvider tClassContainerItemProvider;

	/**
	 * This creates an adapter for a {@link org.gravity.typegraph.basic.containers.TClassContainer}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createTClassContainerAdapter() {
		if (tClassContainerItemProvider == null) {
			tClassContainerItemProvider = new TClassContainerItemProvider(this);
		}

		return tClassContainerItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.gravity.typegraph.basic.containers.TFieldContainer} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected TFieldContainerItemProvider tFieldContainerItemProvider;

	/**
	 * This creates an adapter for a {@link org.gravity.typegraph.basic.containers.TFieldContainer}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createTFieldContainerAdapter() {
		if (tFieldContainerItemProvider == null) {
			tFieldContainerItemProvider = new TFieldContainerItemProvider(this);
		}

		return tFieldContainerItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.gravity.typegraph.basic.containers.TFieldDefinitionContainer} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected TFieldDefinitionContainerItemProvider tFieldDefinitionContainerItemProvider;

	/**
	 * This creates an adapter for a {@link org.gravity.typegraph.basic.containers.TFieldDefinitionContainer}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createTFieldDefinitionContainerAdapter() {
		if (tFieldDefinitionContainerItemProvider == null) {
			tFieldDefinitionContainerItemProvider = new TFieldDefinitionContainerItemProvider(this);
		}

		return tFieldDefinitionContainerItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.gravity.typegraph.basic.containers.TFieldSignatureContainer} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected TFieldSignatureContainerItemProvider tFieldSignatureContainerItemProvider;

	/**
	 * This creates an adapter for a {@link org.gravity.typegraph.basic.containers.TFieldSignatureContainer}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createTFieldSignatureContainerAdapter() {
		if (tFieldSignatureContainerItemProvider == null) {
			tFieldSignatureContainerItemProvider = new TFieldSignatureContainerItemProvider(this);
		}

		return tFieldSignatureContainerItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.gravity.typegraph.basic.containers.TSignatureContainer} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected TSignatureContainerItemProvider tSignatureContainerItemProvider;

	/**
	 * This creates an adapter for a {@link org.gravity.typegraph.basic.containers.TSignatureContainer}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createTSignatureContainerAdapter() {
		if (tSignatureContainerItemProvider == null) {
			tSignatureContainerItemProvider = new TSignatureContainerItemProvider(this);
		}

		return tSignatureContainerItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.gravity.typegraph.basic.containers.TMethodDefinitionContainer} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected TMethodDefinitionContainerItemProvider tMethodDefinitionContainerItemProvider;

	/**
	 * This creates an adapter for a {@link org.gravity.typegraph.basic.containers.TMethodDefinitionContainer}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createTMethodDefinitionContainerAdapter() {
		if (tMethodDefinitionContainerItemProvider == null) {
			tMethodDefinitionContainerItemProvider = new TMethodDefinitionContainerItemProvider(this);
		}

		return tMethodDefinitionContainerItemProvider;
	}

	/**
	 * This returns the root adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public ComposeableAdapterFactory getRootAdapterFactory() {
		return parentAdapterFactory == null ? this : parentAdapterFactory.getRootAdapterFactory();
	}

	/**
	 * This sets the composed adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void setParentAdapterFactory(ComposedAdapterFactory parentAdapterFactory) {
		this.parentAdapterFactory = parentAdapterFactory;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public boolean isFactoryForType(Object type) {
		return supportedTypes.contains(type) || super.isFactoryForType(type);
	}

	/**
	 * This implementation substitutes the factory itself as the key for the adapter.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter adapt(Notifier notifier, Object type) {
		return super.adapt(notifier, this);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Object adapt(Object object, Object type) {
		if (isFactoryForType(type)) {
			Object adapter = super.adapt(object, type);
			if (!(type instanceof Class<?>) || (((Class<?>) type).isInstance(adapter))) {
				return adapter;
			}
		}

		return null;
	}

	/**
	 * This adds a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void addListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.addListener(notifyChangedListener);
	}

	/**
	 * This removes a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void removeListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.removeListener(notifyChangedListener);
	}

	/**
	 * This delegates to {@link #changeNotifier} and to {@link #parentAdapterFactory}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void fireNotifyChanged(Notification notification) {
		changeNotifier.fireNotifyChanged(notification);

		if (parentAdapterFactory != null) {
			parentAdapterFactory.fireNotifyChanged(notification);
		}
	}

	/**
	 * This disposes all of the item providers created by this factory. 
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void dispose() {
		if (tTypeContainerItemProvider != null)
			tTypeContainerItemProvider.dispose();
		if (tAccessContainerItemProvider != null)
			tAccessContainerItemProvider.dispose();
		if (tMemberContainerItemProvider != null)
			tMemberContainerItemProvider.dispose();
		if (tClassContainerItemProvider != null)
			tClassContainerItemProvider.dispose();
		if (tFieldContainerItemProvider != null)
			tFieldContainerItemProvider.dispose();
		if (tFieldDefinitionContainerItemProvider != null)
			tFieldDefinitionContainerItemProvider.dispose();
		if (tFieldSignatureContainerItemProvider != null)
			tFieldSignatureContainerItemProvider.dispose();
		if (tSignatureContainerItemProvider != null)
			tSignatureContainerItemProvider.dispose();
		if (tMethodDefinitionContainerItemProvider != null)
			tMethodDefinitionContainerItemProvider.dispose();
	}

}
