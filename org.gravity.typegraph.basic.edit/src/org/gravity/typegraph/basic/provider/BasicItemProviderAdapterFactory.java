/**
 */
package org.gravity.typegraph.basic.provider;

import java.util.ArrayList;
import java.util.Collection;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.edit.provider.ChangeNotifier;
import org.eclipse.emf.edit.provider.ComposeableAdapterFactory;
import org.eclipse.emf.edit.provider.ComposedAdapterFactory;
import org.eclipse.emf.edit.provider.IChangeNotifier;
import org.eclipse.emf.edit.provider.IDisposable;
import org.eclipse.emf.edit.provider.IEditingDomainItemProvider;
import org.eclipse.emf.edit.provider.IItemLabelProvider;
import org.eclipse.emf.edit.provider.IItemPropertySource;
import org.eclipse.emf.edit.provider.INotifyChangedListener;
import org.eclipse.emf.edit.provider.IStructuredItemContentProvider;
import org.eclipse.emf.edit.provider.ITreeItemContentProvider;

import org.gravity.typegraph.basic.util.BasicAdapterFactory;

/**
 * This is the factory that is used to provide the interfaces needed to support Viewers.
 * The adapters generated by this factory convert EMF adapter notifications into calls to {@link #fireNotifyChanged fireNotifyChanged}.
 * The adapters also support Eclipse property sheets.
 * Note that most of the adapters are shared among multiple instances.
 * <!-- begin-user-doc -->
 * <!-- end-user-doc -->
 * @generated
 */
public class BasicItemProviderAdapterFactory extends BasicAdapterFactory
		implements ComposeableAdapterFactory, IChangeNotifier, IDisposable {
	/**
	 * This keeps track of the root adapter factory that delegates to this adapter factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ComposedAdapterFactory parentAdapterFactory;

	/**
	 * This is used to implement {@link org.eclipse.emf.edit.provider.IChangeNotifier}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IChangeNotifier changeNotifier = new ChangeNotifier();

	/**
	 * This keeps track of all the supported types checked by {@link #isFactoryForType isFactoryForType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Collection<Object> supportedTypes = new ArrayList<Object>();

	/**
	 * This constructs an instance.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public BasicItemProviderAdapterFactory() {
		supportedTypes.add(IEditingDomainItemProvider.class);
		supportedTypes.add(IStructuredItemContentProvider.class);
		supportedTypes.add(ITreeItemContentProvider.class);
		supportedTypes.add(IItemLabelProvider.class);
		supportedTypes.add(IItemPropertySource.class);
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.gravity.typegraph.basic.TAccess} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected TAccessItemProvider tAccessItemProvider;

	/**
	 * This creates an adapter for a {@link org.gravity.typegraph.basic.TAccess}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createTAccessAdapter() {
		if (tAccessItemProvider == null) {
			tAccessItemProvider = new TAccessItemProvider(this);
		}

		return tAccessItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.gravity.typegraph.basic.TAnnotation} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected TAnnotationItemProvider tAnnotationItemProvider;

	/**
	 * This creates an adapter for a {@link org.gravity.typegraph.basic.TAnnotation}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createTAnnotationAdapter() {
		if (tAnnotationItemProvider == null) {
			tAnnotationItemProvider = new TAnnotationItemProvider(this);
		}

		return tAnnotationItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.gravity.typegraph.basic.TClass} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected TClassItemProvider tClassItemProvider;

	/**
	 * This creates an adapter for a {@link org.gravity.typegraph.basic.TClass}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createTClassAdapter() {
		if (tClassItemProvider == null) {
			tClassItemProvider = new TClassItemProvider(this);
		}

		return tClassItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.gravity.typegraph.basic.TField} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected TFieldItemProvider tFieldItemProvider;

	/**
	 * This creates an adapter for a {@link org.gravity.typegraph.basic.TField}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createTFieldAdapter() {
		if (tFieldItemProvider == null) {
			tFieldItemProvider = new TFieldItemProvider(this);
		}

		return tFieldItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.gravity.typegraph.basic.TFieldDefinition} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected TFieldDefinitionItemProvider tFieldDefinitionItemProvider;

	/**
	 * This creates an adapter for a {@link org.gravity.typegraph.basic.TFieldDefinition}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createTFieldDefinitionAdapter() {
		if (tFieldDefinitionItemProvider == null) {
			tFieldDefinitionItemProvider = new TFieldDefinitionItemProvider(this);
		}

		return tFieldDefinitionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.gravity.typegraph.basic.TFieldSignature} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected TFieldSignatureItemProvider tFieldSignatureItemProvider;

	/**
	 * This creates an adapter for a {@link org.gravity.typegraph.basic.TFieldSignature}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createTFieldSignatureAdapter() {
		if (tFieldSignatureItemProvider == null) {
			tFieldSignatureItemProvider = new TFieldSignatureItemProvider(this);
		}

		return tFieldSignatureItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.gravity.typegraph.basic.TCall} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected TCallItemProvider tCallItemProvider;

	/**
	 * This creates an adapter for a {@link org.gravity.typegraph.basic.TCall}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createTCallAdapter() {
		if (tCallItemProvider == null) {
			tCallItemProvider = new TCallItemProvider(this);
		}

		return tCallItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.gravity.typegraph.basic.TMethod} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected TMethodItemProvider tMethodItemProvider;

	/**
	 * This creates an adapter for a {@link org.gravity.typegraph.basic.TMethod}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createTMethodAdapter() {
		if (tMethodItemProvider == null) {
			tMethodItemProvider = new TMethodItemProvider(this);
		}

		return tMethodItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.gravity.typegraph.basic.TMethodDefinition} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected TMethodDefinitionItemProvider tMethodDefinitionItemProvider;

	/**
	 * This creates an adapter for a {@link org.gravity.typegraph.basic.TMethodDefinition}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createTMethodDefinitionAdapter() {
		if (tMethodDefinitionItemProvider == null) {
			tMethodDefinitionItemProvider = new TMethodDefinitionItemProvider(this);
		}

		return tMethodDefinitionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.gravity.typegraph.basic.TMethodSignature} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected TMethodSignatureItemProvider tMethodSignatureItemProvider;

	/**
	 * This creates an adapter for a {@link org.gravity.typegraph.basic.TMethodSignature}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createTMethodSignatureAdapter() {
		if (tMethodSignatureItemProvider == null) {
			tMethodSignatureItemProvider = new TMethodSignatureItemProvider(this);
		}

		return tMethodSignatureItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.gravity.typegraph.basic.TPackage} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected TPackageItemProvider tPackageItemProvider;

	/**
	 * This creates an adapter for a {@link org.gravity.typegraph.basic.TPackage}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createTPackageAdapter() {
		if (tPackageItemProvider == null) {
			tPackageItemProvider = new TPackageItemProvider(this);
		}

		return tPackageItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.gravity.typegraph.basic.TParameter} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected TParameterItemProvider tParameterItemProvider;

	/**
	 * This creates an adapter for a {@link org.gravity.typegraph.basic.TParameter}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createTParameterAdapter() {
		if (tParameterItemProvider == null) {
			tParameterItemProvider = new TParameterItemProvider(this);
		}

		return tParameterItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.gravity.typegraph.basic.TParameterList} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected TParameterListItemProvider tParameterListItemProvider;

	/**
	 * This creates an adapter for a {@link org.gravity.typegraph.basic.TParameterList}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createTParameterListAdapter() {
		if (tParameterListItemProvider == null) {
			tParameterListItemProvider = new TParameterListItemProvider(this);
		}

		return tParameterListItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.gravity.typegraph.basic.TypeGraph} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected TypeGraphItemProvider typeGraphItemProvider;

	/**
	 * This creates an adapter for a {@link org.gravity.typegraph.basic.TypeGraph}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createTypeGraphAdapter() {
		if (typeGraphItemProvider == null) {
			typeGraphItemProvider = new TypeGraphItemProvider(this);
		}

		return typeGraphItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.gravity.typegraph.basic.TInterface} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected TInterfaceItemProvider tInterfaceItemProvider;

	/**
	 * This creates an adapter for a {@link org.gravity.typegraph.basic.TInterface}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createTInterfaceAdapter() {
		if (tInterfaceItemProvider == null) {
			tInterfaceItemProvider = new TInterfaceItemProvider(this);
		}

		return tInterfaceItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.gravity.typegraph.basic.TAnnotationType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected TAnnotationTypeItemProvider tAnnotationTypeItemProvider;

	/**
	 * This creates an adapter for a {@link org.gravity.typegraph.basic.TAnnotationType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createTAnnotationTypeAdapter() {
		if (tAnnotationTypeItemProvider == null) {
			tAnnotationTypeItemProvider = new TAnnotationTypeItemProvider(this);
		}

		return tAnnotationTypeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.gravity.typegraph.basic.TTextAnnotation} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected TTextAnnotationItemProvider tTextAnnotationItemProvider;

	/**
	 * This creates an adapter for a {@link org.gravity.typegraph.basic.TTextAnnotation}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createTTextAnnotationAdapter() {
		if (tTextAnnotationItemProvider == null) {
			tTextAnnotationItemProvider = new TTextAnnotationItemProvider(this);
		}

		return tTextAnnotationItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.gravity.typegraph.basic.TConstructorName} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected TConstructorNameItemProvider tConstructorNameItemProvider;

	/**
	 * This creates an adapter for a {@link org.gravity.typegraph.basic.TConstructorName}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createTConstructorNameAdapter() {
		if (tConstructorNameItemProvider == null) {
			tConstructorNameItemProvider = new TConstructorNameItemProvider(this);
		}

		return tConstructorNameItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.gravity.typegraph.basic.TConstructorSignature} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected TConstructorSignatureItemProvider tConstructorSignatureItemProvider;

	/**
	 * This creates an adapter for a {@link org.gravity.typegraph.basic.TConstructorSignature}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createTConstructorSignatureAdapter() {
		if (tConstructorSignatureItemProvider == null) {
			tConstructorSignatureItemProvider = new TConstructorSignatureItemProvider(this);
		}

		return tConstructorSignatureItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.gravity.typegraph.basic.TConstructorDefinition} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected TConstructorDefinitionItemProvider tConstructorDefinitionItemProvider;

	/**
	 * This creates an adapter for a {@link org.gravity.typegraph.basic.TConstructorDefinition}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createTConstructorDefinitionAdapter() {
		if (tConstructorDefinitionItemProvider == null) {
			tConstructorDefinitionItemProvider = new TConstructorDefinitionItemProvider(this);
		}

		return tConstructorDefinitionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.gravity.typegraph.basic.TRead} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected TReadItemProvider tReadItemProvider;

	/**
	 * This creates an adapter for a {@link org.gravity.typegraph.basic.TRead}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createTReadAdapter() {
		if (tReadItemProvider == null) {
			tReadItemProvider = new TReadItemProvider(this);
		}

		return tReadItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.gravity.typegraph.basic.TWrite} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected TWriteItemProvider tWriteItemProvider;

	/**
	 * This creates an adapter for a {@link org.gravity.typegraph.basic.TWrite}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createTWriteAdapter() {
		if (tWriteItemProvider == null) {
			tWriteItemProvider = new TWriteItemProvider(this);
		}

		return tWriteItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.gravity.typegraph.basic.TClassEntity} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected TClassEntityItemProvider tClassEntityItemProvider;

	/**
	 * This creates an adapter for a {@link org.gravity.typegraph.basic.TClassEntity}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createTClassEntityAdapter() {
		if (tClassEntityItemProvider == null) {
			tClassEntityItemProvider = new TClassEntityItemProvider(this);
		}

		return tClassEntityItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.gravity.typegraph.basic.TFieldEntity} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected TFieldEntityItemProvider tFieldEntityItemProvider;

	/**
	 * This creates an adapter for a {@link org.gravity.typegraph.basic.TFieldEntity}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createTFieldEntityAdapter() {
		if (tFieldEntityItemProvider == null) {
			tFieldEntityItemProvider = new TFieldEntityItemProvider(this);
		}

		return tFieldEntityItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.gravity.typegraph.basic.TMethodEntity} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected TMethodEntityItemProvider tMethodEntityItemProvider;

	/**
	 * This creates an adapter for a {@link org.gravity.typegraph.basic.TMethodEntity}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createTMethodEntityAdapter() {
		if (tMethodEntityItemProvider == null) {
			tMethodEntityItemProvider = new TMethodEntityItemProvider(this);
		}

		return tMethodEntityItemProvider;
	}

	/**
	 * This returns the root adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public ComposeableAdapterFactory getRootAdapterFactory() {
		return parentAdapterFactory == null ? this : parentAdapterFactory.getRootAdapterFactory();
	}

	/**
	 * This sets the composed adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void setParentAdapterFactory(ComposedAdapterFactory parentAdapterFactory) {
		this.parentAdapterFactory = parentAdapterFactory;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public boolean isFactoryForType(Object type) {
		return supportedTypes.contains(type) || super.isFactoryForType(type);
	}

	/**
	 * This implementation substitutes the factory itself as the key for the adapter.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter adapt(Notifier notifier, Object type) {
		return super.adapt(notifier, this);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Object adapt(Object object, Object type) {
		if (isFactoryForType(type)) {
			Object adapter = super.adapt(object, type);
			if (!(type instanceof Class<?>) || (((Class<?>) type).isInstance(adapter))) {
				return adapter;
			}
		}

		return null;
	}

	/**
	 * This adds a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void addListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.addListener(notifyChangedListener);
	}

	/**
	 * This removes a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void removeListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.removeListener(notifyChangedListener);
	}

	/**
	 * This delegates to {@link #changeNotifier} and to {@link #parentAdapterFactory}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void fireNotifyChanged(Notification notification) {
		changeNotifier.fireNotifyChanged(notification);

		if (parentAdapterFactory != null) {
			parentAdapterFactory.fireNotifyChanged(notification);
		}
	}

	/**
	 * This disposes all of the item providers created by this factory. 
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void dispose() {
		if (tAccessItemProvider != null)
			tAccessItemProvider.dispose();
		if (tAnnotationItemProvider != null)
			tAnnotationItemProvider.dispose();
		if (tClassItemProvider != null)
			tClassItemProvider.dispose();
		if (tFieldItemProvider != null)
			tFieldItemProvider.dispose();
		if (tFieldDefinitionItemProvider != null)
			tFieldDefinitionItemProvider.dispose();
		if (tFieldSignatureItemProvider != null)
			tFieldSignatureItemProvider.dispose();
		if (tCallItemProvider != null)
			tCallItemProvider.dispose();
		if (tMethodItemProvider != null)
			tMethodItemProvider.dispose();
		if (tMethodDefinitionItemProvider != null)
			tMethodDefinitionItemProvider.dispose();
		if (tMethodSignatureItemProvider != null)
			tMethodSignatureItemProvider.dispose();
		if (tPackageItemProvider != null)
			tPackageItemProvider.dispose();
		if (tParameterItemProvider != null)
			tParameterItemProvider.dispose();
		if (tParameterListItemProvider != null)
			tParameterListItemProvider.dispose();
		if (typeGraphItemProvider != null)
			typeGraphItemProvider.dispose();
		if (tInterfaceItemProvider != null)
			tInterfaceItemProvider.dispose();
		if (tAnnotationTypeItemProvider != null)
			tAnnotationTypeItemProvider.dispose();
		if (tTextAnnotationItemProvider != null)
			tTextAnnotationItemProvider.dispose();
		if (tConstructorNameItemProvider != null)
			tConstructorNameItemProvider.dispose();
		if (tConstructorSignatureItemProvider != null)
			tConstructorSignatureItemProvider.dispose();
		if (tConstructorDefinitionItemProvider != null)
			tConstructorDefinitionItemProvider.dispose();
		if (tReadItemProvider != null)
			tReadItemProvider.dispose();
		if (tWriteItemProvider != null)
			tWriteItemProvider.dispose();
		if (tClassEntityItemProvider != null)
			tClassEntityItemProvider.dispose();
		if (tFieldEntityItemProvider != null)
			tFieldEntityItemProvider.dispose();
		if (tMethodEntityItemProvider != null)
			tMethodEntityItemProvider.dispose();
	}

}
