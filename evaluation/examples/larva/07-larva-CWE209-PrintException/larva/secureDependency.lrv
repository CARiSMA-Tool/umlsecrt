IMPORTS{
  import java.util.LinkedList;
  import java.util.HashMap;
  import java.util.Set;
  import java.util.Map;
  import java.util.Collection;
  import java.util.Collections;
  
  import java.nio.file.Files;
  import java.nio.file.Paths;
  
  import com.google.gson.Gson;
  
  import good.Good;
  import secure.SecureException;
  import cwe.CWE209;
}
GLOBAL{
  VARIABLES{
    LinkedList<String> stack = new LinkedList<>();
    Map<String,Collection<String>> secrecyMap =  readSecurityLevels("secrecy.json");
    Map<String,Collection<String>> integrityMap =  readSecurityLevels("integrity.json");
  }
  EVENTS{
    enterM0(String id) = {Good.doSomething(*)} where id = "Good.doSomething";
    enterM1(String id) = {Good.run(*)} where id = "Good.run";
    enterM2(String id) = {CWE209.run(*)} where id = "CWE209.run";
    enterM3(String id) = {SecureException.printStackTrace(*)} where id = "SecureException.printStackTrace";
    enterMethod() = {enterM0|enterM1|enterM2|enterM3}
    returnM0() = {Good.doSomething(*)uponReturning(*)}
    returnM1() = {Good.run(*)uponReturning(*)}
    returnM2() = {CWE209.run(*)uponReturning(*)}
    returnM3() = {SecureException.printStackTrace(*)uponReturning(*)}
    exitMethod() = {returnM0|returnM1|returnM2|returnM3}
  }
  PROPERTY secureDependency{
    STATES{
      BAD{bad {System.err.println("Illegal Access");System.exit(-1);}}
      STARTING{ok}
    }
    TRANSITIONS {
      ok -> ok [exitMethod \ \ stack.pop();]
      ok -> bad [enterMethod \ !checkSecureDependency(stack.peek(),id) \ ]
      ok -> ok [enterMethod \ \ System.out.println("Push: "+id);stack.push(id); ]
    }
  }
}
METHODS{
  boolean checkSecureDependency(String caller, String callee){
  	System.out.println("Check: "+caller+" -> "+callee); 
    if(caller == null) {
      return true;
    }
    return checkSecrecy(caller,callee) && checkIntegrity(caller, callee);
  }
  
  boolean checkSecrecy(String caller, String callee){
    Collection<String> calleeSecrecy = secrecyMap.getOrDefault(callee, Collections.emptySet());
    if(secrecyMap.get(caller).contains(callee)) {
      return calleeSecrecy.contains(callee);
    }
    return !calleeSecrecy.contains(callee);
  }
  
  boolean checkIntegrity(String caller, String callee){
    Collection<String> calleeIntegrity = integrityMap.getOrDefault(callee, Collections.emptySet());
    if(secrecyMap.get(caller).contains(callee)) {
      return calleeIntegrity.contains(callee);
    }
    return !calleeIntegrity.contains(callee);
  }
  
  Map<String, Collection<String>> readSecurityLevels(String path) {
    try {
      return (Map<String, Collection<String>>) new Gson().fromJson(Files.newBufferedReader(Paths.get(path)), Map.class);
    } catch (Exception e) {
      e.printStackTrace();
      System.exit(-1);
    }
    return null;
  }
}
