
partial class TypeGraphImpl {

@members<--

	public TPackage getPackage(String namespace) {
		return getPackage(namespace.split("\\."));
	}

	public TPackage getPackage(String[] namespace) {
		EList<TPackage> next = getPackages();
		for (int i = 0; i < namespace.length;) {
			String name = namespace[i++];
			boolean contains = false;
			for (TPackage tPackage : next) {
				if (name.equals(tPackage.getTName())) {
					if (i == namespace.length) {
						return tPackage;
					}
					next = tPackage.getSubpackage();
					contains = true;
					break;
				}
			}
			if (!contains) {
				return null;
			}
		}
		return null;
	}

	public TClass getClass(String fullyQualifiedName) {
		int index = fullyQualifiedName.lastIndexOf('.');
		String defaultPackage = "default";
		if (index > 0) {
			defaultPackage = fullyQualifiedName.substring(0, index);
		}
		TPackage tPackage = getPackage(defaultPackage);
		if (tPackage != null) {
			String name = fullyQualifiedName.substring(index + 1);
			for (TClass tType : tPackage.getClasses()) {
				if (tType.getTName().equals(name) || tType.getTName().contentEquals(fullyQualifiedName)) {
					return tType;
				}
			}
		} else {
			String name = fullyQualifiedName.substring(index + 1);
			for (TClass tType : getClasses()) {
				if (tType.getTName().equals(name) || tType.getTName().contentEquals(fullyQualifiedName)) {
					return tType;
				}
			}
		}
		return null;
	}

	public TInterface getInterface(String fullyQualifiedName) {
		int index = fullyQualifiedName.lastIndexOf('.');
		String defaultPackage = "default";
		if (index > 0) {
			defaultPackage = fullyQualifiedName.substring(0, index);
		}
		TPackage tPackage = getPackage(defaultPackage);
		if (tPackage != null) {
			String name = fullyQualifiedName.substring(index + 1);
			for (TInterface tType : tPackage.getInterfaces()) {
				if (tType.getTName().equals(name) || tType.getTName().contentEquals(fullyQualifiedName)) {
					return tType;
				}
			}
		}
		return null;
	}

	public TAbstractType getType(String fullyQualifiedName) {
		int index = fullyQualifiedName.lastIndexOf('.');
		String defaultPackage = "default";
		if (index > 0) {
			defaultPackage = fullyQualifiedName.substring(0, index);
		}
		TPackage tPackage = getPackage(defaultPackage);
		if (tPackage != null) {
			String name = fullyQualifiedName.substring(index + 1);
			for (TAbstractType tType : tPackage.getOwnedTypes()) {
				if (tType.getTName().equals(name) || tType.getTName().contentEquals(fullyQualifiedName)) {
					return tType;
				}
			}
		}
		return null;
	}

	-->

@model toString ()<--		return super.toString();-->

}