import  org.gravity.typegraph.basic.TVisibility;
import  org.gravity.typegraph.basic.TAbstractType;
import  java.util.Collections;
import  java.util.HashSet;

partial class TInterfaceImpl {

@members<--

	private HashSet<TInterface> fillParents(HashSet<TInterface> parents) {

		int size = parents.size();
		parents.addAll(this.getParentInterfaces());
		if (size < parents.size()) {
			fillParents(parents);
		}

		return parents;
	}

	protected boolean hasCommonSuperType(TAbstractType tAbstractType) {
		if (!(tAbstractType instanceof TInterfaceImpl)) {
			return false;
		}
		TInterfaceImpl tInterface = (TInterfaceImpl) tAbstractType;
		HashSet<TInterface> parents = new HashSet<TInterface>();
		HashSet<TInterface> otherParents = new HashSet<TInterface>();

		parents.add(this);
		otherParents.add(tInterface);
		this.fillParents(parents);
		tInterface.fillParents(otherParents);

		return (!Collections.disjoint(parents, otherParents));
	}

	-->

@model isSuperTypeOf (TAbstractType tType)<--		if (tType instanceof TInterface) {
			EList<TInterface> tInterfaces = getParentInterfaces();
			if (tInterfaces.contains(tType)) {
				return true;
			} else {
				for (TInterface tInterface : tInterfaces) {
					if (tInterface.isSuperTypeOf(tType)) {
						return true;
					}
				}
			}
		}
		return false;-->

}