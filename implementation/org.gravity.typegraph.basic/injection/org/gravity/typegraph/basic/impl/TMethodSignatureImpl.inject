import  org.gravity.typegraph.basic.TParameter;
import  org.gravity.typegraph.basic.TMember;

partial class TMethodSignatureImpl {

@members<--

	@Override
	public String toString() {
		String string = super.toString();
		String name = getMethod().getTName();
		return string.substring(0, string.length() - 1).concat(", name: ").concat(name).concat(")");
	}

	-->

@model getSignatureString ()<--
		String s = getMethod().getTName() + "(";
		TParameter current = getParamList().getFirst();
		while (current != null) {
			TAbstractType type = current.getType();
			if (type != null) {
				s += type.getTName();
			} else {
				s += "";
			}
			current = current.getNext();
			if (current != null) {
				s += ", ";
			}
		}
		TAbstractType ret = getReturnType();
		if (ret == null) {
			return s + ")";
		} else {
			return s + "):" + ret.getTName();
		}-->

@model getTDefinition (TAbstractType defining)<--		if (defining.getSignature().contains(this)) {
			for (TMember definition : defining.getDefines()) {
				if (this.getDefinitions().contains(definition)) {
					return (TMethodDefinition) definition;
				}
			}
		}
		return null;-->

}