import  java.util.Collections;
import  java.util.LinkedList;
import  java.util.List;
import  org.gravity.hulk.HDetector;
import  org.gravity.hulk.antipatterngraph.HMetric;
import  org.gravity.hulk.antipatterngraph.values.HRelativeValueConstants;

partial class HDetectorImpl {

@members<--

	protected double calculateRelativeThreshold(HRelativeValueConstants level, Class<? extends HMetric> clazz) {
		EList<HAnnotation> annotations = getHAntiPatternHandling().getApg().getHAnnotations();

		List<Double> keys = new LinkedList<>();
		for (HAnnotation a : annotations) {
			if (clazz.isAssignableFrom(a.getClass())) {
				double key = ((HMetric) a).getValue();
				keys.add(key);
			}
		}
		int size = keys.size();
		if (keys.size() == 0) {
			return Double.valueOf(HulkDetector.getDefaultThresholds().get(clazz.getName()));
		}

		Collections.sort(keys);

		switch (level) {
		case VERY_LOW:
			return keys.get(size * 1 / 6);
		case LOW:
			return keys.get(size * 2 / 6);
		case MEDIUM:
			return keys.get(size * 3 / 6);
		case HIGH:
			return keys.get(size * 4 / 6);
		case VERY_HIGH:
			return keys.get(size * 5 / 6);
		}
		throw new RuntimeException();
	}

	-->

}