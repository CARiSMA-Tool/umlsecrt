
import java.util.HashSet;
import org.gravity.hulk.antipatterngraph.HAnnotation;
import org.gravity.hulk.antipatterngraph.antipattern.HBlobAntiPattern;
import org.gravity.hulk.refactoringgraph.HCluster;
import org.gravity.hulk.refactoringgraph.HInBlobClusterAccess;
import org.gravity.hulk.refactoringgraph.RefactoringgraphFactory;
import org.gravity.typegraph.basic.TAccess;
import org.gravity.typegraph.basic.annotations.TAnnotation;
import org.gravity.typegraph.basic.TClass;
import org.gravity.typegraph.basic.TMember;

partial class HClusterAccessCalculatorImpl {

@members <--

	@Override
	public String getGuiName() {
		return "Member Cluster Accesses";
	}
	
-->

@model detect (HAntiPatternGraph apg) <--

		HashSet<HInBlobClusterAccess> allCreatedAnnotations = new HashSet<>();
		for (HAnnotation hAnnotation : apg.getHAnnotations()) {
			if (hAnnotation instanceof HBlobAntiPattern) {
				HBlobAntiPattern hBlob = (HBlobAntiPattern) hAnnotation;
				TClass tClass = (TClass) hBlob.getTAnnotated();
				HashSet<HInBlobClusterAccess> createdAnnotations = new HashSet<>();
				for (TAnnotation tAnnotation : tClass.getTAnnotation()) {
					if (tAnnotation instanceof HCluster) {
						HCluster hCluster = (HCluster) tAnnotation;
						EList<TMember> tMembers = hCluster.getTMembers();
						HashSet<TMember> seenOut = new HashSet<>();
						HashSet<TMember> seenIn = new HashSet<>();
						int value = 0;
						for (TMember tMember : tMembers) {
							for (TAccess tAccess : tMember.getTAccessing()) {
								TMember tTarget = tAccess.getTTarget();
								if (tClass.equals(tTarget.getDefinedBy())) {
									if (!seenOut.contains(tTarget)) {
										if (!tMembers.contains(tTarget)) {
											seenOut.add(tTarget);
											value++;
										}
									}
								}
							}
							for (TAccess tAccess : tMember.getAccessedBy()) {
								TMember tTarget = tAccess.getTSource();
								if (tClass.equals(tTarget.getDefinedBy())) {
									if (!seenIn.contains(tTarget)) {
										if (!tMembers.contains(tTarget)) {
											seenIn.add(tTarget);
											value++;
										}
									}
								}
							}
						}
						HInBlobClusterAccess iba = RefactoringgraphFactory.eINSTANCE.createHInBlobClusterAccess();
						iba.setValue(value);
						iba.setHCluster(hCluster);
						createdAnnotations.add(iba);
					}
				}
				tClass.getTAnnotation().addAll(createdAnnotations);
				allCreatedAnnotations.addAll(createdAnnotations);
			}
		}
		apg.getHAnnotations().addAll(allCreatedAnnotations);
		return true;
-->

}