
import java.util.HashSet;
import java.util.Set;
import java.util.Stack;
import org.gravity.typegraph.basic.TFieldDefinition;
import org.gravity.typegraph.basic.TMethodDefinition;
import org.gravity.typegraph.basic.TSyntethicMethod;
import org.gravity.typegraph.basic.containers.ContainersFactory;

partial class HMethodToDataClassAccessCalculatorImpl {

@members <--

	@Override
	public String getGuiName() {
		return "Calculate the Method accesses from Blob to DataClass";
	}
	
-->

@model getAllAffectedMembers (TClass tClass) <--

		Set<TMember> allMembers = new HashSet<>();
		Stack<TClass> stack = new Stack<>();
		stack.add(tClass);
		while (!stack.isEmpty()) {
			TClass tNextClass = stack.pop();
			for (TMember member : tNextClass.getDefines()) {
				TMember redefined;
				if (member instanceof TMethodDefinition) {
					TMethodDefinition method = (TMethodDefinition) member;
					redefined = method.getOverriding();
				} else if (member instanceof TFieldDefinition) {
					TFieldDefinition field = (TFieldDefinition) member;
					redefined = field.getHiding();
				} else if (member instanceof TSyntethicMethod){
					// Ignore synthetic methods
					continue;
				} else {
					throw new RuntimeException("Unknown TMember subtype.");
				}
				if (!allMembers.contains(redefined)) {
					allMembers.add(member);
				}
			}
			stack.addAll(tNextClass.getChildClasses());
		}
		TMemberContainer container = ContainersFactory.eINSTANCE.createTMemberContainer();
		container.getTMembers().addAll(allMembers);
		return container;
-->

}