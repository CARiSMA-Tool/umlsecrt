
import java.util.Stack;

partial class SearchImpl {

@members <--

	private void setPG4Package(TPackage tPackage, TypeGraph tTypeGraph) {
		Stack<TPackage> tPackages = new Stack<TPackage>();
		tPackages.add(tPackage);

		while (!tPackages.isEmpty()) {
			TPackage p = tPackages.pop();
			p.setPg(tTypeGraph);
			p.setTypeGraph(tTypeGraph);
			tPackages.addAll(p.getSubpackage());
		}
	}
	
-->

@model linkClass (TClass tClass) <--
		TPackage next = this.getBasePackage(tClass.getPackage());
		TPackage match = null;
		for (TPackage p : pg.getPackages()) {
			if (p.getTName().compareTo(next.getTName()) == 0) {
				match = p;
			}
		}
		if (match == null) {
			pg.getPackages().add(next);
			setPG4Package(next, pg);
		} else {
			EList<TPackage> packages = match.getSubpackage();
			while (packages.size() > 0) {
				EList<TPackage> next_child = next.getSubpackage();
				if (next_child.size() > 0) {
					next = next_child.get(0);
					boolean success = false;
					for (TPackage p : packages) {
						if (p.getTName().compareTo(next.getTName()) == 0) {
							packages = p.getSubpackage();
							match = p;
							success = true;
							break;
						}
					}
					if (!success) {
						break;
					}
				} else {
					match.getOwnedTypes().add(tClass);
					match.getClasses().add(tClass);
					return;
				}
			}
			EList<TPackage> next_child = next.getSubpackage();
			if (next_child.size() > 0) {
				match.getSubpackage().add(next_child.get(0));
				setPG4Package(next_child.get(0), pg);
			} else {
				match.getOwnedTypes().add(tClass);
				match.getClasses().add(tClass);
			}
			return;
		}
-->

@model countAccessingTMembers (TMember tMember) <--
		return tMember.getAccessedBy().size();
-->

}