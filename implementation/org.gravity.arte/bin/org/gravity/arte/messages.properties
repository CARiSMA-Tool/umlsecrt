#Basics
tc_s		=	test case
tc_p		=	test cases
tcf_s		=	test case file
ts_s		=	test suite
tse_s		=	test step element
cont_s		=	containment
je_s		=	java element
ass			=	assertion.
refac_s		=	refactoring
sol_s		=	solution
program_s	=	java program
program_p	=	java programs
desc_S		=	Description
ex_case		=	extended
bas_case	=	basic

pub 	=	public accessible
priv	=	hidden

pum 	=	a pull-up method refactoring
exs		=	an extract superclass refactoring 
non		=	no executable refactoring

#ASCII Art
ascii.line.s		=	ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss\n
ascii.line.s.pg		=	sssssssssssssss Triggering Program Graph Generation ssssssssssssssss
ascii.line.s.pum	=	ssssssssssssss  Triggering Pull-Up Method Refactoring ssssssssssssss
ascii.line.s.puf	=	sssssssssssssss  Triggering Pull-Up Field Refactoring ssssssssssssss
ascii.line.s.cs		=	sssssssssssss  Triggering Create Superclass Refactoring ssssssssssss
ascii.line.s.exs	=	ssssssssssss  Triggering Extract Superclass Refactoring ssssssssssss
ascii.line.s.prop	=	ssssssssssssssssss Triggering Propose Refactoring ssssssssssssssssss
ascii.line.s.sync	=	ssssssssssss  Triggering Synchronization with Java Code ssssssssssss
ascii.line.s.load	=	sssssssssssssssssssssss Initialize Solution  sssssssssssssssssssssss
ascii.line.s.plugin	=	ssssssssssssssssssssss Receiving Plug-in Name ssssssssssssssssssssss
ascii.line.s.paths	=	ssssssssssssssssssss  Setting Paths for Storage ssssssssssssssssssss



ascii.line.+	=	++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
ascii.line.-	=	--------------------------------------------------------------------
ascii.line.1	=	\n\#\#\#\#\#\#\#\#\#\#\#\#\#\#\#\#\#\#\#\#\#\#\#\#\#\#\#\#\#\#\#\#\#\#\#\#\#\#\#\#\#\#\#\#\#\#\#\#\#\#\#\#\#\#\#\#\#\#\#\#\#\#\#\#\#\#\#\#
ascii.line.2	=	\#\#\#\#\#\#\#\#\#\#\#\#\#\#\#\#\#\#\#\#\#\#\#\#\#\#\#\#\#\#\#\#\#\#\#\#\#\#\#\#\#\#\#\#\#\#\#\#\#\#\#\#\#\#\#\#\#\#\#\#\#\#\#\#\#\#\#\#\n
ascii.hid.tc	=	\#\#\#\#\#\#\#\#\#\#\#\#\#\#\#\#\#\#\#\#   Executing hidden tests.  \#\#\#\#\#\#\#\#\#\#\#\#\#\#\#\#\#\#\#\#
ascii.pub.tc	=	\#\#\#\#\#\#\#\#\#\#\#\#\#\#\#\#\#\#\#\#   Executing public tests.  \#\#\#\#\#\#\#\#\#\#\#\#\#\#\#\#\#\#\#\#
ascii.res.tc	=	\#\#\#\#\#\#\#\#\#\#\#\#\#\#\#\#\#\#\#\#  Summary of test results.  \#\#\#\#\#\#\#\#\#\#\#\#\#\#\#\#\#\#\#\#
ascii.arte		=	\#\#\#\#\#\#\#\# ARTE: Automated Refactoring Test Environment {0} \#\#\#\#\#\#\#\#


#Misc
exec.tc		=	Executing test case: "{0}"
exec.hid.tc	=	Executing hidden test case: "{0}"

out.before	=	Output of execution before refactoring:
out.after	=	Output of execution after refactoring:

cont.e.fn	=	Containment of element expected but is not contained. (false-negative)
cont.e.fp	=	Containment of element forbidden but is contained in class. (false-positive)

impl.e.fn	=	Extension of "{0}" expected but "{1}" has been extended. (false-negative) 
impl.e.fp	=	Extension of "{0} is forbidden but is extended by class. (false-positive)

ref.e.fn	=	Execution of refactoring has been expected to be SUCCESSFUL. (false-negative)
ref.e.fp	=	Execution of refactoring has been expected to FAIL. (false-positive)

#Status messages
init	=	Initializing public accessible test cases and java programs.
ready	=	ARTE has initialized the test suite.
exit	=	Program has been closed.
version =	Your version of ARTE is "{0}".

fail				=	FAILURE:\ 
fail.behav			=	The refactoring has changed the programs behavior.
fail.change.behav	=	The refactoring changed the behavior of the program.
fail.class			=	The java program does not contain the class "{0}".
fail.exec			=	Test case "{0}" has not been executed successfully.\nThe solution needed {1, number} seconds for execution. 
fail.pg				=	Generation of program graph failed.
fail.run			=	The program does not run proper.
fail.skip			=	Skipping {0}.
fail.sync			=	The propagation of changes from the program graph to the java sourcecode failed.

#Refactorings
ref.pum				=	to pull-Up method "{0}" from the classes
ref.exs.m.1			=	to extract a super class for the classes "{0}" containing the method 
ref.exs.m.2			=	to extract a super class for the classes "{0}" containing the methods "{1}" and "{2}". 
ref.exs.m.3			=	to extract a super class for the classes "{0}" containing the methods {1} {2} and "{3}". 
ref.none			=	no applicable refactoring

#Thrown warnings
warn					=	WARNING:\ 
warn.program.rm.one		=	The removed java program "{0}" is still referenced by test case "{1}".
warn.program.rm.two		=	The removed java program "{0}" is still referenced by the test cases "{1}" and "{2}".
warn.program.rm.three	=	The removed java program "{0}" is still referenced by the test cases "{1}", "{2}" and "{3}".
warn.program.rm.many	=	The removed java program "{0}" is still referenced by multiple test cases.
warn.program.not		=	The test suite does not contain the java program "{0}" required by the added test case "{1}".
warn.prop				=	Expected was {0} but your solution proposed {1}. Please check by hand if both are applicable. Continuing with the expected refactoring.
warn.prop.fn			=	The fields contained in the expected refactoring and the proposal are not equal. Continuing with the expected refactoring.
warn.prop.mn			=	The methods contained in the expected refactoring and the proposal are not equal. Continuing with the expected refactoring.
warn.prop.cn			=	The classes contained in the expected refactoring and the proposal are not equal. Continuing with the expected refactoring.
warn.prop.dif.m			=	You proposed to pull up a different method than the expected one.
  
#Success messages
success			=	SUCCESS:\ 
success.add		=	Added {0} "{1}" to the test suite. 
success.compile	=	The java program has been compiled.
success.cont	=	This static check whether a class contains a specific method or field was successful.
success.cp.file	=	Copied the file "{0}" into the test suite.
success.exec	=	Test case "{0}" has been executed SUCCESSFULLY.\nThe solution needed {1, number} seconds for execution. 
success.out.eq	=	Output before and after refactoring are equal.
success.prop	=	The proposed refactoring and expected refactoring are equal.
success.rm		=	Removed {0} "{1}" from the test suite. 
success.sol		=	The Solution has been loaded successfully.
  
#Error Messages
error						=	ERROR:\ 
error.clean 				=	Database corrupted. An automatic cleanup has been enforced. Please report the Bug!
error.close					=	It seems as if ARTE has not been closes proper last time. Please close the test suite always with the "exit" command.
error.file					=	The file "{0}" does not exist. 
error.file.del				=	Failed to delete the file "{0}" 
error.file.ext				=	The entered path does not reference a *.{0} file.
error.prop					=	Proposal of not allowed or unknown kind of refactoring.
error.prop.fatal			=	The reference proposal read from the test case is not valid. Please report the Bug!
error.install				=	The location the test suite is installed to could not be determined.
error.access.htc			=	The hidden test cases are not available.
error.sys.compiler			=	Cannot provide system compiler.
error.compilation			=	Compilation of the java program "{0}" was not possible.
error.stat.match			=	Current status "{0}" does not match required status "{1}" 
error.old.sol				=	Solution is implementing an too old version of the test interface. 
error.process.cmd			=	There occurred an Error while processing the command aborting.
error.tc					=	An error occurred while processing the test case "{0}". The import of the test case file "{1}" has been skipped.
error.tcf.exists.not		=	The requested test case file \"{0}\" does not exist.
error.u.impl				=	Unknown kind of implementation expected. Please report the Bug!
error.run.exept				=	Unhandled runtime exception
error.io					=	Could not read from system input stream
error.inval.cmd				=	Invalid command "{0}"
error.java.inst				=	The installation of java could not be determined. Was searching for java at: "{0}".
error.load.solution			=	Loading solution failed for some internal reason. Please report the Bug!
error.amount				=	Wrong amount of values for \"{0}\".
error.no.path				=	You have to add the paths of the {0} you want to load.
error.sol.amount			=	You have entered a wrong amount of values for the argument "--load".
error.no.java				=	No ".java" file found in java program "{0}".
error.at.path				=	There is a error in the entered path: "{0}"
error.unknown				=	Unknown {0}.
error.skipped.dir			=	Skipped {0} at the path "{1}" it is a directory and not a {0}.
error.skipped.path			=	Skipped {0} at the path "{1}" the file does not exist.
error.skipped.exists		=	Skipped {0} "{1}" as it already exists in the test suite.
error.skipped.exists.not	=	Skipped {0} "{1}" as it is not contained in the test suite.
error.skipped.main			=	Skipped java program with the name "{0}" as the main class name could not be read.
error.testinterface			=	No class implementing the test interface found.

#Shell commands
Shell.solution		=	solution
Shell.load			=	load
Shell.testcases		=	testcases
Shell.programs		=	programs
Shell.execute		=	execute
Shell.help			=	help
Shell.exit			=	exit
Shell.sourcecode	=	sourcecode
Shell.version		=	version

#Shell argument identifier
Shell.args.add			=	--add
Shell.args.all			=	--all
Shell.args.hidden		=	--hidden
Shell.args.list			=	--list
Shell.args.load			=	--load
Shell.args.main			=	--main
Shell.args.rm			=	--remove
Shell.args.src			=	--src
Shell.args.sourcecode	= 	--sourcecode
Shell.args.solution 	=	--solution
Shell.args.test			=	--test
Shell.args.help			=	--help

tc.exists		=	There is already an test case "{0}" in the already imported test case file "{1}".
tcf.exists		=	There is already a test case file: "{0}".
tcf.duplicate	=	There is already a test case file with an identical name "{0}" in the main directory. Skipping the new file.

#listing elements
list.programs		=	The test suite currently contains {0, number, integer} public accessible java programs.
list.test.sum		=	\nSummary of the test results:\n+ {0,number,percent} of the test cases were executed successfull\n? {1,number,percent} of the test cases ended in a warning but were still successful.\n- {2,number,percent} of the test cases resulted in a failure.
list.test.res		=	The test case "{0}" was executed with status "{1}".
list.ts.elements	=	The test suite currently contains {0, number, integer} {1} {2}.
list.tc				=	"{0}" in test case file "{1}" 
list.sol			=	The added solution is called "{0}" and participates in the {1} case. 

#Not existing - no error
no.exec			=	At least one name of a test case has to be entered, when using the "--test" argument.
no.sol			=	No solution added yet. To add a solution use the "solution --load" command or the "load --solution" command.
no.src			=	The sourcecode folder has to contain a folder "src". For more information type "help sourcecode".
no.tc			=	There is no test case "{0}" in the test suite.
no.tcs			=	There is no test case file with the name "{0}" in the test suite.
no.tc.in.file	=	There is no test case in the test file "{0}". Skipped import.
no.tc.in.ts		=	Removed the file "{0}" as no test case of the file is any longer in the test suite.

#Missing args
no.args.main		=	The "--src" argument requires the "--main" argument.
no.args.src.main	=	You have to enter exactly one name and one sourcecode path.
no.args.help		=	Help pages are available for the commands "solution", "testcases", "programs" and "execute".
no.args.load		=	Possible arguments are \"load --solution\", \"load --src --main\", and \"load --test\"
no.args.program		=	Possible arguments are \"programs --list\", \"programs --src --main\", and \"programs --remove\"
no.args.exec		=	Possible arguments are "--test", "--hidden", "--all", and "--help".
no.args.sol			=	Possible arguments are "solution --list" and "solution --load"
no.args.tc			=	Possible arguments are: "--list","--remove","--add"

#Help pages
help.solution	=	The solution command can be used to load a solution implementing the TTCTestInterface.jar into ARTE.\n\t\"solution --load <absolute_path_to_jar>\"\nOr to list the currently loaded solution.\n\tTherfore use the command \"solution --list\"
help.testcases	=	The testcases command allows test case related actions. These are:\n\"testcases --list\" to show all known testcases\n\t\"testcases --add <absolute_path_to_ttc>*\" to load test case files\n\t\"testcases --remove  <name.ttc/name>*\" to remove test cases or test case files
help.programs	=	The programms command allows java program related actions. These are:\n\"programs --list\" to show all known java programs\n\t\"programs --src <absolute_path_to_program> --main <name_of_main_class>" to add a java program\n\t\"programs --remove  <name>*\" to remove java programs\nFor more information about the java programs type \"help sourcecode\"
help.execute	=	The execute command allows the execution of test cases. Fore specifying which test cases should be executed three argumens are existing:\n\t\"execute --test <name.ttc/name>*\" to execute all test cases in a test file or a single test case\n\t\"execute --hidden\" to execute the hidden test cases\n\t\"execute --all\" to execute all known test cases
help.sourcecode	=	The java programs have to contain a src folder containing the package structure of the java program represented as folder tree.\nEvery java program needs one class implementing the \"public static void main(String[] args)\" method.	
