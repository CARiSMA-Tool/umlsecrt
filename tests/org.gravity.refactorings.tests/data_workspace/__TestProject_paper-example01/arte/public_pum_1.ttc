TestFile public_pum_1 {

	class child1 {
		package "example01"
		name	"ChildClass1"
	}
	
	class child2 {
		package "example01"
		name	"ChildClass2"
	}
	
	class existing_parent {
		package "example01"
		name	"ParentClass"
	}
	
	class String {
		package "java.lang"
		name 	"String"
	}
	
	class int {
		name "int"
	}
	
	method child_method {
		name "method"
		params String, int
	}
	
	pullup_method executable_pum {
		parent existing_parent
		method child_method
	}
	
	case pub_pum1_1_paper1 {
		description "PUM-POS: (paper1) Pull-up of two classes into a parent class."
		program "paper-example01"
		
		testflow {
			assertTrue(executable_pum)
			
			synchronize
			compile
			existing_parent contains child_method
			child1 ~contains child_method
			child2 ~contains child_method
		}
	}
	
	class not_existing_parent {
		package "example01"
		name 	"Foo"
	}
	
	pullup_method not_executable_pum {
		parent not_existing_parent
		method child_method
	}
	
	case pub_pum1_2 {
		description "PUM-NEG: Pull-up from child of a not existing parent class."
		program "paper-example01"
		
		testflow {
			assertFalse(not_executable_pum)
			
			synchronize
			compile
			child1 contains child_method
			child2 contains child_method
		}
	}
	
}
