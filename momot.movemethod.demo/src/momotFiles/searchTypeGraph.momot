package momot.^search



import at.ac.tuwien.big.momot.^search.^fitness.dimension.TransformationLengthDimension
import at.ac.tuwien.big.moea.^experiment.executor.listener.SeedRuntimePrintListener

import momotFiles.FitnessCalculator


import org.gravity.typegraph.basic.BasicPackage
import org.gravity.typegraph.basic.TypeGraph
import org.moeaframework.core.operator.TournamentSelection
import org.moeaframework.core.operator.OnePointCrossover
import at.ac.tuwien.big.momot.^search.algorithm.operator.mutation.TransformationPlaceholderMutation
import momotFiles.CustomTransformationPlaceHolderMutation
import lpg.runtime.DiagnoseParser.RepairCandidate
import momotFiles.CustomTournamentSelection

initialization = {
	BasicPackage.eINSTANCE.eClass // register Package
	System.out.println("Search started.");
}

search = {
	model          = {
		
		//file       = "input/VisibilityRestrictionTest.xmi"
		//file       = "input/TypeGraphExample.xmi"
		file       = "input/OneMethodToMoveTest.xmi"
		//file       = "input/03_JUnit3.8.2.xmi"
		//file       = "input/04_Gantt1.10.2.xmi"
	}
	solutionLength  = 10

	transformations = {
		//modules = [ "transformations/Basic.henshin" ]
		modules = [ "transformations/MoveMethod.henshin" ]
		//modules = [ "transformations/MoveMethod2.henshin" ]
		ignoreUnits = [
		"MoveMethod::rules::libCheck",
		"MoveMethod::rules::MoveMethod",	
		"MoveMethod::rules::checkPreconditions",	
		"MoveMethod::rules::dynMoveMethod",
		"MoveMethod::rules::changeVisibility"
		//,"MoveMethod::rules::main"
		]
	}

	fitness         = {
		objectives = {
			Coupling : minimize { FitnessCalculator.calculateCoupling(root as TypeGraph) }
			SolutionLength : minimize new TransformationLengthDimension
		}
		constraints = {
			visibility: minimize { FitnessCalculator.visiblility(root as TypeGraph) }
		}
	}

	algorithms      = {
		//Random  : moea.createRandomSearch()*
		//NSGAII  : moea.createNSGAII()
		//NSGAIII : moea.createNSGAIII()
		NSGAIII : moea.createNSGAIII(new CustomTournamentSelection(2), new OnePointCrossover(1.0), new CustomTransformationPlaceHolderMutation(0.05))
	}
}

experiment = {
	populationSize    = 100
	maxEvaluations    = 10000
	nrRuns            = 1
	progressListeners = [ new SeedRuntimePrintListener ]
}

analysis = {
	indicators       = [ hypervolume invertedGenerationalDistance ]
	significance     = 0.01
	show             = [ aggregateValues statisticalSignificance individualValues ]
	outputFile       = "output/analysis/analysis.txt"
	boxplotDirectory = "output/analysis/"
	printOutput
}

results = {
	objectives = {
		outputFile      = "output/objectives/objective_values.txt"
		printOutput
	}

	solutions  = {
		outputFile      = "output/solutions/objective_values.txt"
		outputDirectory = "output/solutions/"
	}

	models     = {
		outputDirectory = "output/models/"
	}
}

finalization = {
	System.out.println("Search finished.");
}
